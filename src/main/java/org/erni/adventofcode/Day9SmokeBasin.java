package org.erni.adventofcode;

import java.util.*;

public class Day9SmokeBasin {


    static int WALL = 9;

    static int[][] heightsTest = {
            {2,1,9,9,9,4,3,2,1,0},
            {3,9,8,7,8,9,4,9,2,1},
            {9,8,5,6,7,8,9,8,9,2},
            {8,7,6,7,8,9,6,7,8,9},
            {9,8,9,9,9,6,5,6,7,8}
    };

    static int[][] heightsFran =
    {
        {8,6,5,4,4,3,4,7,8,9,4,3,2,4,4,6,9,8,7,6,5,4,3,2,1,0,5,6,7,8,9,2,3,5,6,7,8,9,5,3,2,4,5,7,9,8,7,6,4,2,1,2,4,5,6,7,8,9,6,5,6,5,6,8,9,7,7,6,5,4,2,3,2,4,5,7,8,9,8,7,5,4,5,6,7,8,9,8,7,6,5,4,3,1,3,3,5,9,9,9},
        {8,7,4,3,1,2,5,6,7,8,9,3,1,2,3,4,5,9,9,9,8,7,6,4,3,2,3,8,9,9,3,1,2,3,5,6,7,8,9,4,3,4,5,9,8,9,5,4,2,1,0,1,2,3,4,6,7,8,9,4,3,4,5,9,8,6,5,4,3,2,1,0,1,3,4,5,7,8,9,6,4,3,4,7,9,9,9,9,8,7,8,5,4,0,1,2,9,8,7,7},
        {9,6,5,1,0,5,6,7,9,9,3,2,0,1,2,5,6,7,8,9,9,8,7,6,4,3,6,9,8,9,5,6,4,4,6,7,8,9,6,5,9,5,6,9,7,6,5,4,3,2,3,3,4,5,8,7,9,9,2,0,2,5,6,8,9,8,6,5,7,4,5,1,9,4,9,9,9,9,6,5,3,2,4,4,5,9,8,9,9,9,8,7,6,1,2,9,8,9,5,6},
        {6,5,4,3,2,3,4,7,8,9,6,3,2,3,4,7,8,9,9,2,1,9,8,6,5,4,5,6,7,8,9,7,9,5,7,8,9,8,7,9,8,9,9,8,9,8,7,5,4,7,5,5,5,6,7,8,9,3,2,1,2,4,5,6,9,9,8,9,8,6,7,9,8,9,8,7,8,9,7,6,2,1,2,3,4,6,7,8,9,7,9,8,7,2,9,8,7,6,4,5},
        {7,8,8,7,6,4,5,6,9,6,5,4,3,4,5,6,7,9,9,4,2,3,9,8,9,9,7,8,9,9,8,9,8,9,8,9,3,9,8,9,7,6,7,7,8,9,8,6,5,6,7,6,6,7,9,9,9,5,3,4,3,6,8,9,8,7,9,4,9,7,9,8,6,5,9,6,7,8,9,4,3,2,3,4,9,8,9,9,8,6,5,9,8,9,8,7,6,4,3,4},
        {8,9,9,8,9,6,7,7,8,9,9,9,9,5,7,7,8,9,7,9,9,9,7,9,9,9,9,9,4,5,7,6,7,8,9,0,2,4,9,7,6,4,5,6,9,9,8,7,6,7,9,9,7,9,8,7,8,9,4,5,9,7,9,8,7,6,7,3,2,9,8,7,6,4,5,5,6,7,8,9,4,3,4,5,6,7,9,8,7,6,4,6,9,9,9,8,7,5,6,9},
        {9,9,9,9,8,7,8,8,9,9,8,7,8,9,8,8,9,5,6,9,8,6,6,7,8,9,5,3,2,3,4,5,6,7,8,9,3,9,8,9,5,3,4,5,7,8,9,9,7,9,9,8,9,8,7,6,8,9,5,6,7,9,7,6,5,4,3,2,1,3,9,8,4,3,2,3,5,8,9,8,9,4,9,6,7,8,9,9,6,4,3,2,0,9,8,9,8,9,7,8},
        {0,9,8,7,9,9,9,9,9,9,7,6,7,8,9,9,5,4,9,8,7,5,4,3,9,8,7,0,1,4,6,7,8,9,9,9,9,8,7,5,3,2,3,4,6,6,8,9,9,8,8,6,5,9,6,5,7,8,9,7,9,9,8,7,9,5,4,2,0,1,9,8,7,3,1,2,3,9,8,7,8,9,8,9,8,9,7,8,9,6,5,7,9,9,7,6,9,9,8,9},
        {2,9,9,6,5,6,7,8,9,9,6,5,6,7,9,5,4,2,3,9,6,4,3,2,1,9,8,1,2,6,9,8,9,3,9,8,7,9,8,3,2,1,2,3,4,5,6,8,9,7,6,5,4,3,4,4,9,9,8,9,8,7,9,9,8,6,5,3,3,2,9,7,5,2,0,1,2,9,7,5,9,8,7,8,9,4,6,7,9,7,9,9,8,7,6,5,4,2,9,2},
        {9,8,7,5,4,5,6,9,9,8,9,4,5,7,8,9,0,1,9,8,7,5,9,9,2,9,8,4,3,7,8,9,4,2,4,9,6,5,4,3,2,0,1,4,5,6,7,8,9,8,9,7,5,2,1,3,4,5,6,7,9,6,8,9,9,6,5,4,4,9,9,6,4,3,1,9,9,7,6,4,6,5,6,9,4,3,5,6,7,9,7,9,9,8,8,9,3,1,0,1},
        {9,9,8,4,3,3,5,9,8,7,9,3,9,8,9,2,1,2,5,9,9,9,8,7,9,8,7,6,4,5,9,9,2,1,9,9,8,6,5,4,3,1,2,3,4,5,8,9,9,9,9,8,7,8,7,6,5,7,7,8,9,5,7,8,9,8,6,5,9,8,7,6,5,6,9,8,7,6,4,3,4,4,5,8,9,5,7,8,9,5,6,7,8,9,9,8,9,3,9,2},
        {8,8,9,3,2,1,9,8,7,6,8,9,8,9,9,3,2,3,4,5,6,9,7,6,5,9,8,7,8,6,7,8,9,9,8,9,9,7,6,5,5,4,3,4,5,9,9,9,9,6,5,9,9,9,9,7,8,9,9,9,3,4,5,9,9,9,7,6,7,9,8,7,7,9,9,9,9,8,5,2,3,3,4,6,7,9,9,9,3,4,5,9,9,9,9,7,8,9,8,9},
        {7,7,8,9,1,0,9,7,6,5,4,5,6,7,8,9,3,4,9,9,9,6,5,4,3,3,9,8,9,7,8,9,7,6,7,9,9,8,7,6,6,5,4,6,7,8,9,9,8,5,4,4,5,6,9,8,9,6,4,3,2,3,6,7,9,8,9,7,8,9,9,9,8,9,9,9,8,7,6,1,0,1,2,5,6,7,8,9,1,3,4,5,7,9,7,6,8,6,7,8},
        {6,6,8,9,9,9,7,6,5,3,3,3,7,8,6,8,9,9,8,8,8,9,4,2,1,2,3,9,9,8,9,2,3,5,7,8,9,9,8,8,7,9,6,8,9,9,9,8,7,6,3,2,3,5,5,9,9,9,5,5,3,4,8,9,8,7,9,9,9,3,4,5,9,7,8,9,9,8,7,2,1,2,3,4,5,6,9,3,0,1,3,4,9,8,6,5,7,5,6,9},
        {4,5,7,7,8,9,8,9,4,2,1,2,3,4,5,6,9,8,7,6,7,9,3,1,0,2,9,8,7,9,0,1,2,4,6,7,8,9,9,9,9,8,7,9,9,9,8,7,4,8,2,1,2,5,4,5,9,8,9,7,8,5,9,8,7,6,7,8,9,2,3,4,5,6,7,8,9,8,4,3,4,5,6,7,8,9,3,2,1,2,5,9,8,7,5,4,5,4,5,6},
        {3,4,5,6,9,9,9,8,6,6,3,4,5,5,6,8,9,7,6,5,8,9,4,2,9,3,9,7,6,5,1,2,4,5,7,8,9,5,4,7,8,9,8,9,9,8,7,6,3,2,1,0,1,2,3,9,8,7,9,9,7,6,7,9,9,9,8,9,2,1,5,5,6,8,9,9,9,7,6,4,5,6,7,9,9,8,9,4,2,9,6,9,8,6,4,3,4,3,4,7},
        {1,4,6,7,8,9,8,7,6,5,4,6,8,6,8,9,8,7,6,4,5,9,5,9,8,9,9,9,5,4,2,3,5,6,8,9,8,9,3,6,7,9,9,8,9,9,8,5,4,3,2,1,9,9,9,5,7,6,7,8,9,8,8,9,3,4,9,7,4,3,6,7,7,9,9,9,9,8,7,8,8,7,8,9,8,7,9,5,9,8,9,9,7,6,3,2,1,2,3,4},
        {2,3,4,8,9,9,9,9,7,6,5,6,7,8,9,9,7,6,5,3,9,8,9,6,7,7,8,8,9,4,3,4,6,7,8,9,7,4,2,5,6,5,6,7,8,9,8,6,6,4,5,9,8,7,8,4,5,5,6,7,8,9,9,3,2,1,9,6,5,4,5,6,9,8,8,7,8,9,9,9,9,8,9,5,4,6,8,9,8,7,9,8,6,5,4,3,0,1,2,5},
        {3,5,6,7,8,9,9,9,8,7,8,9,8,9,9,8,5,4,3,2,5,7,9,5,6,6,9,7,8,9,4,8,7,9,9,8,6,3,1,4,3,4,6,9,9,5,9,8,7,9,9,9,8,6,7,2,3,4,5,9,9,9,9,5,3,9,8,7,6,5,6,9,8,7,7,6,5,9,8,7,6,9,3,2,3,5,6,9,7,6,8,9,7,6,5,2,1,2,8,9},
        {4,6,7,8,9,9,7,8,9,8,9,8,9,9,8,7,6,6,4,1,3,4,9,4,3,4,7,6,7,8,9,9,8,9,8,7,5,4,0,1,2,3,5,7,9,4,3,9,8,9,8,7,9,5,6,1,4,5,6,9,8,7,8,9,9,9,9,8,7,6,9,8,7,6,3,2,4,5,9,9,5,4,2,0,1,6,7,8,9,5,6,9,6,5,4,3,4,3,7,8},
        {9,7,8,9,9,7,6,9,9,9,9,7,9,8,7,6,5,4,3,2,4,5,7,9,2,4,4,5,6,7,8,9,9,8,9,9,4,3,2,2,3,4,6,7,8,9,1,2,9,9,8,6,5,4,1,0,1,6,7,9,9,6,9,7,8,9,9,9,8,8,9,9,8,5,4,3,5,6,9,8,7,7,3,5,2,7,8,9,2,4,9,8,9,6,7,7,6,4,5,6},
        {9,9,9,9,8,6,5,6,9,8,7,6,5,9,8,8,6,6,4,3,5,6,8,9,0,2,3,7,8,8,9,7,6,7,8,9,5,4,4,3,4,5,6,7,9,1,0,9,9,9,9,8,4,3,2,1,2,3,9,7,8,5,4,6,7,8,9,8,9,9,8,9,9,9,8,7,6,7,9,8,6,5,4,6,7,8,9,2,1,9,8,7,8,9,8,8,7,7,6,8},
        {9,8,9,8,9,5,4,3,4,9,9,9,4,3,9,8,7,8,9,8,6,7,8,9,1,3,4,6,8,9,3,4,5,6,9,8,6,7,7,5,7,6,7,8,9,2,9,8,9,8,7,6,5,4,9,9,3,9,7,6,5,4,3,4,6,7,9,7,6,5,6,7,8,9,9,8,9,8,9,9,7,6,8,7,8,9,9,9,2,9,9,6,7,9,9,9,8,9,7,9},
        {8,7,8,7,8,9,4,2,1,0,9,8,9,2,3,9,8,9,8,9,7,8,9,3,2,4,5,7,9,2,2,3,4,5,6,9,7,8,9,6,8,8,9,9,9,9,9,7,8,9,8,7,8,9,7,8,9,9,9,6,4,3,2,3,5,7,9,6,5,4,5,6,7,9,7,9,4,9,3,1,9,7,9,8,9,9,9,8,9,8,9,5,9,7,8,9,9,9,9,5},
        {8,6,7,6,7,9,5,3,4,9,8,7,9,1,9,9,9,7,6,9,8,9,6,5,4,5,6,8,9,0,1,2,3,4,7,9,8,9,9,8,9,9,2,6,9,8,9,6,7,9,9,8,9,8,6,7,9,9,8,9,9,1,0,4,5,6,8,9,6,3,4,5,9,8,5,4,3,2,1,0,1,9,9,9,9,8,7,6,6,7,9,4,7,6,8,8,9,7,5,4},
        {6,5,5,5,6,8,9,5,9,8,9,6,8,9,8,9,7,6,5,6,9,8,7,6,5,6,8,9,4,2,9,3,4,9,8,9,9,0,1,9,8,9,3,4,9,7,6,5,8,9,9,9,8,7,5,6,8,9,7,7,8,9,1,5,6,8,9,6,5,4,5,9,8,7,6,5,4,3,2,1,5,6,8,9,8,9,9,5,4,3,2,3,4,5,6,7,8,9,4,3},
        {9,4,3,4,5,9,9,6,9,7,6,5,7,9,7,8,9,7,4,5,6,9,8,9,7,8,9,7,6,9,8,9,9,8,9,4,2,1,9,8,7,8,9,9,8,5,4,3,2,9,8,7,6,6,4,5,7,3,5,6,7,9,2,3,7,9,8,9,7,5,9,9,9,8,9,6,5,4,3,2,4,7,9,9,7,9,8,6,5,4,1,2,3,6,7,8,9,4,3,2},
        {7,3,2,3,4,5,8,9,8,6,5,4,3,7,6,7,8,9,3,7,8,9,9,9,8,9,9,9,9,8,7,9,8,7,8,9,3,9,8,9,6,9,8,7,6,4,3,2,1,0,9,6,5,4,3,2,1,2,4,5,8,9,5,4,5,6,7,8,9,9,8,9,9,9,8,7,7,5,5,4,5,9,9,8,6,5,9,8,7,6,2,4,4,5,6,9,9,9,9,9},
        {5,4,3,4,5,6,7,8,9,4,3,2,2,4,5,9,9,5,4,6,9,9,7,6,9,9,9,8,9,7,6,4,4,6,9,9,9,8,7,6,5,6,9,8,7,5,4,6,3,4,9,7,8,5,4,1,0,1,3,4,8,9,6,5,6,7,8,9,8,9,7,8,9,9,9,9,8,7,6,5,9,8,7,6,5,4,3,9,6,4,3,5,9,6,7,8,9,8,8,8},
        {9,5,6,7,8,9,8,9,4,3,2,1,0,3,4,7,8,9,5,9,8,7,6,5,4,9,8,7,6,5,4,2,3,5,7,9,8,6,5,4,4,2,9,8,7,6,7,7,5,6,9,8,5,4,3,2,1,2,4,5,7,8,9,9,7,8,9,8,7,9,5,7,8,9,5,4,9,9,7,8,9,9,8,7,4,3,2,9,7,6,4,5,8,9,9,9,4,6,6,7},
        {8,9,7,9,9,6,9,7,6,8,7,3,1,2,3,6,7,8,9,9,9,9,4,3,2,1,9,6,5,4,2,1,2,5,6,9,9,5,4,3,2,1,2,9,9,7,9,8,7,8,9,9,6,5,8,3,2,3,4,6,8,9,4,9,8,9,9,7,6,5,4,6,6,8,9,3,2,9,8,9,9,9,9,9,4,2,1,0,9,7,5,6,7,8,9,2,3,5,5,6},
        {7,9,9,3,4,5,9,8,7,9,5,4,4,3,4,5,6,9,9,9,8,7,6,9,1,0,2,9,9,3,1,0,1,3,9,8,7,6,5,4,3,4,3,5,6,9,9,9,8,9,9,9,9,8,7,5,6,9,6,7,8,9,5,7,9,9,8,7,5,4,3,4,5,7,8,9,1,2,9,5,9,8,7,6,5,4,9,9,7,9,6,7,8,9,0,1,2,3,4,5},
        {6,9,8,9,5,6,7,9,8,8,6,5,5,4,6,8,9,7,9,9,9,9,9,8,9,2,9,8,7,5,4,3,2,3,4,9,8,7,8,5,6,5,4,6,7,8,9,9,9,9,9,8,9,9,8,6,7,8,9,8,9,7,6,7,8,9,7,6,4,3,2,3,6,7,8,9,0,1,2,4,9,9,8,7,6,9,8,9,6,9,8,9,9,5,4,3,3,4,5,6},
        {4,5,6,8,9,7,8,9,9,9,7,6,6,5,7,9,7,5,7,9,8,9,9,7,8,9,8,9,8,9,5,4,3,4,6,7,9,8,9,6,7,6,5,9,8,9,7,8,9,9,9,7,8,9,9,7,9,9,5,9,9,8,9,8,9,9,8,8,9,4,3,5,6,8,9,2,1,3,4,9,8,9,9,8,7,9,7,6,5,4,9,9,9,6,7,6,4,5,6,7},
        {3,6,5,7,8,9,9,8,7,9,8,7,8,9,8,9,6,4,5,6,7,9,7,6,5,6,7,8,9,7,6,6,5,6,9,8,9,9,9,8,8,7,6,7,9,7,5,6,9,8,7,6,7,8,9,8,9,5,4,3,1,9,9,9,9,7,9,9,6,5,4,6,7,8,9,4,3,4,9,8,7,9,7,9,9,8,6,5,4,3,9,9,8,7,7,6,5,6,9,8},
        {2,3,4,5,7,8,9,7,6,4,9,8,9,5,9,6,4,3,6,7,9,8,6,5,4,5,7,8,9,8,9,8,6,7,8,9,3,4,5,9,9,8,7,8,9,5,4,9,8,7,6,5,6,5,6,9,8,9,5,4,9,9,8,7,6,5,9,8,7,9,8,7,8,9,6,5,6,9,8,7,6,5,5,6,9,8,7,6,3,2,8,9,9,9,8,9,6,7,8,9},
        {1,4,5,6,7,9,9,7,5,3,2,9,5,4,3,2,2,2,4,6,8,9,7,6,8,9,9,9,9,9,3,9,7,8,9,2,1,2,3,7,9,9,8,9,0,2,3,5,9,8,5,4,2,4,5,6,7,8,9,9,8,7,6,5,4,3,2,9,8,9,9,9,9,9,7,9,9,9,9,8,4,3,4,5,9,8,7,6,4,3,7,9,4,3,9,8,7,8,9,0},
        {2,3,4,5,6,7,8,9,3,2,1,2,9,4,2,1,0,1,5,6,9,9,8,7,9,7,8,9,9,3,2,9,8,9,8,9,0,1,2,6,8,9,9,2,1,3,4,7,9,8,6,3,1,3,6,8,9,9,4,3,9,9,8,7,5,5,4,5,9,9,8,8,7,8,9,7,8,9,7,6,5,4,6,9,9,9,7,6,5,4,6,8,9,2,1,9,8,9,3,1},
        {3,4,5,6,9,8,9,3,2,1,0,9,8,9,3,9,1,2,3,6,8,9,9,8,9,6,4,5,7,9,1,2,9,6,7,8,9,2,4,5,6,9,8,9,2,4,5,8,9,8,5,4,2,5,6,7,8,9,9,2,1,3,9,8,6,6,8,9,9,9,7,6,5,2,5,6,7,9,8,8,6,5,7,8,9,9,8,7,9,8,7,8,9,3,0,2,9,6,4,2},
        {4,5,6,9,8,9,5,4,4,3,9,8,7,6,9,8,9,3,4,5,7,9,8,9,6,5,3,5,8,9,9,3,4,5,6,7,8,9,5,9,9,9,7,9,4,5,6,9,9,7,6,7,7,6,7,8,9,6,7,9,0,9,8,9,7,7,9,9,9,8,7,5,4,3,4,5,7,8,9,9,9,6,8,9,6,5,9,8,9,9,8,9,3,2,1,9,8,7,6,3},
        {6,9,9,8,7,8,9,5,6,9,9,8,6,4,6,7,8,9,6,9,8,9,7,6,5,4,2,3,6,7,8,9,7,6,7,9,9,8,9,8,7,8,6,8,9,9,9,9,9,8,7,8,9,7,8,9,4,5,6,7,9,8,7,9,8,8,9,9,9,9,8,6,5,4,5,6,9,9,9,9,8,9,9,6,5,4,3,9,2,3,9,9,9,3,4,9,9,8,8,4},
        {9,8,9,5,6,7,9,6,9,8,7,6,5,3,5,6,9,9,8,9,9,2,9,8,9,5,1,3,4,6,7,8,9,9,8,9,9,7,6,8,6,4,5,9,9,7,8,9,8,9,8,9,9,8,9,8,9,6,7,9,8,7,6,5,9,9,6,8,8,9,9,7,8,5,9,7,8,9,8,6,7,7,9,8,9,9,1,0,1,9,8,9,8,9,9,8,9,9,9,5},
        {8,7,9,4,5,9,8,9,7,6,5,7,3,2,4,5,7,8,9,4,3,1,9,9,9,7,6,4,5,7,8,9,6,4,9,9,9,8,5,3,1,2,9,8,7,6,7,9,7,6,9,9,9,9,5,7,8,9,8,9,9,8,5,4,3,2,4,5,7,8,9,8,7,6,7,9,9,2,3,4,5,6,8,9,8,7,9,9,9,8,7,8,7,5,6,7,9,9,7,6},
        {7,6,8,3,9,8,7,9,9,6,4,3,2,1,2,7,8,9,7,6,9,9,8,9,8,9,7,5,7,8,9,6,5,3,2,9,8,6,5,4,0,1,2,9,6,5,6,7,9,5,3,9,8,7,6,8,9,6,9,9,8,9,4,3,2,1,2,4,5,9,8,9,9,7,8,9,4,1,2,3,4,6,7,8,9,6,7,8,9,7,6,6,6,4,7,7,8,9,8,8},
        {7,5,7,2,1,7,6,7,8,9,3,2,1,0,4,6,7,9,9,9,8,8,7,6,7,8,9,6,8,9,8,7,6,2,1,9,8,7,6,3,1,2,9,7,5,4,5,6,8,9,2,0,9,8,7,9,8,7,9,8,7,8,9,2,1,0,1,3,9,8,7,9,9,8,9,7,3,2,3,4,6,7,8,9,6,5,8,9,7,6,5,4,5,3,4,6,7,9,9,9},
        {5,4,2,1,0,6,5,6,7,9,4,3,3,1,2,5,6,7,9,8,7,6,4,5,9,9,8,7,8,9,9,8,7,3,9,8,7,6,5,4,2,9,8,6,4,3,4,5,7,8,9,1,2,9,9,8,9,9,8,7,6,9,9,9,2,1,2,9,8,7,6,9,7,9,7,6,5,3,4,5,6,8,9,9,7,6,7,8,9,5,4,3,4,2,3,4,9,6,5,4},
        {6,5,7,2,1,2,3,9,9,9,7,4,5,2,3,4,5,6,7,9,8,9,5,7,8,9,9,8,9,7,9,9,8,9,8,9,9,7,6,5,4,5,9,4,3,2,3,4,6,9,9,9,9,7,6,7,8,9,7,6,5,8,7,8,9,2,9,8,7,6,5,8,5,9,8,9,7,4,5,6,9,9,8,9,8,9,8,9,7,6,5,1,0,1,5,7,8,9,4,3},
        {7,6,8,3,9,3,9,7,8,9,6,5,7,6,5,6,7,7,8,9,9,8,6,8,9,8,7,9,5,6,7,8,9,8,7,6,9,8,7,6,7,9,8,6,2,1,2,4,5,7,9,8,7,4,5,8,9,9,8,7,4,3,6,7,9,4,9,9,6,5,4,6,4,5,9,9,6,5,6,9,8,9,7,8,9,9,9,6,5,4,3,2,1,2,5,6,7,8,9,2},
        {8,8,9,9,8,9,5,6,8,9,9,6,9,8,6,7,8,9,9,4,9,8,7,9,9,8,6,5,4,4,9,9,8,7,9,5,4,9,8,7,9,8,7,5,4,0,1,3,4,6,8,9,5,3,4,6,9,9,5,4,3,2,4,8,9,9,8,7,5,4,2,2,3,4,9,8,7,6,9,8,7,5,6,7,8,9,9,7,6,5,5,4,2,3,4,5,6,7,8,9},
        {9,9,8,9,7,6,4,5,9,9,8,9,9,8,7,9,9,9,4,3,1,9,8,9,9,9,7,9,3,2,3,4,9,6,5,4,3,4,9,8,9,9,7,6,2,1,2,3,4,5,7,8,9,4,5,9,8,8,9,9,2,1,2,4,6,7,9,8,9,7,1,0,1,2,3,9,8,9,8,7,6,4,9,8,9,9,9,8,7,8,7,9,3,5,6,7,8,9,9,5},
        {9,8,7,6,5,4,3,4,8,7,7,8,9,9,9,8,7,8,9,4,2,3,9,8,9,9,9,8,9,3,4,9,8,7,6,6,2,3,4,9,8,9,8,7,4,2,3,4,5,6,7,9,8,9,9,8,7,6,7,8,9,0,1,3,4,9,8,7,6,5,3,1,2,4,5,7,9,9,9,4,3,3,8,9,7,8,9,9,8,9,9,9,8,7,8,8,9,4,5,3},
        {8,9,8,5,4,3,2,2,7,6,5,6,8,9,8,7,6,7,8,9,3,5,6,7,8,9,8,7,8,9,5,9,9,9,8,7,1,2,4,5,6,9,8,7,5,5,4,5,7,7,8,9,7,6,7,9,4,5,6,7,8,9,2,4,5,9,9,8,9,6,5,4,3,4,6,8,9,9,8,4,2,1,7,6,6,7,8,9,9,9,4,3,9,8,9,9,4,3,4,2},
        {7,6,5,4,3,1,0,1,2,3,4,5,7,9,7,6,5,6,7,8,9,6,7,8,9,8,9,6,7,9,9,8,7,6,9,9,7,6,5,9,9,8,9,8,6,6,6,6,9,9,9,7,6,4,3,1,3,4,6,8,9,5,3,6,7,8,9,9,8,7,6,5,4,6,7,9,8,7,7,6,1,0,5,4,5,7,9,8,6,8,9,4,5,9,6,5,3,2,1,0},
        {8,7,6,6,5,2,1,2,4,5,6,6,7,8,9,5,4,7,6,7,8,9,8,9,8,7,8,5,9,8,9,8,7,5,3,4,9,7,9,8,8,7,9,8,7,8,7,7,8,9,9,9,7,2,1,0,2,5,6,7,8,9,4,9,8,9,2,3,9,8,7,8,5,9,8,9,7,6,5,4,3,1,2,3,6,7,8,9,5,6,9,5,9,9,7,6,4,3,3,2},
        {9,9,8,7,6,3,2,3,4,5,6,7,9,9,5,4,3,4,5,6,9,9,9,8,7,6,8,4,6,7,8,9,8,3,2,3,5,9,8,7,9,5,4,9,8,9,9,8,9,8,9,9,8,3,2,1,2,7,8,8,9,8,9,8,9,2,1,5,6,9,8,9,6,7,9,8,9,9,9,9,3,2,3,4,7,9,9,2,3,9,8,9,8,9,8,7,5,9,6,4},
        {9,8,9,8,7,4,5,4,5,6,7,9,8,7,6,5,4,5,6,7,8,9,9,7,6,5,4,3,7,9,6,8,9,9,3,4,5,9,7,6,5,4,3,2,9,3,4,9,6,7,9,8,7,5,3,4,5,6,7,9,9,7,8,7,8,9,0,1,9,9,9,9,7,8,9,6,7,7,8,8,9,3,4,5,8,9,5,4,9,8,7,8,7,8,9,8,9,8,7,5},
        {8,7,8,9,8,7,6,7,6,7,8,9,9,8,7,6,5,6,7,9,9,8,7,6,5,4,3,2,3,4,5,7,7,8,9,5,7,9,8,7,6,5,2,1,0,1,2,4,5,9,8,7,6,5,4,5,6,7,9,8,7,6,5,6,7,8,9,9,8,9,9,9,8,9,8,5,8,6,7,7,8,9,5,6,9,8,6,9,8,7,6,5,6,7,8,9,9,9,8,6},
        {6,5,7,7,9,9,7,9,7,8,9,4,5,9,8,9,6,7,8,9,7,9,8,7,6,3,2,1,2,3,4,5,6,7,9,6,9,9,9,9,7,6,3,4,1,2,3,5,6,7,9,9,8,6,7,6,8,9,9,7,6,3,4,7,9,9,9,9,7,8,9,9,9,8,7,4,3,4,5,6,7,8,9,7,8,9,8,9,7,9,5,4,5,6,9,8,9,9,8,7},
        {5,4,5,6,7,9,8,9,9,9,5,3,3,4,9,9,9,8,9,5,6,9,9,9,8,9,7,4,3,4,6,6,7,9,8,7,8,9,6,9,8,7,4,3,2,9,8,6,7,8,9,9,9,9,8,7,9,9,8,6,5,4,5,7,8,9,9,7,6,6,7,9,8,7,6,5,4,5,6,7,8,9,9,8,9,9,9,8,6,7,4,3,4,5,6,7,8,9,9,8},
        {4,3,9,9,8,9,9,7,6,4,3,1,2,5,7,9,3,9,2,3,9,8,9,8,9,7,6,5,4,5,8,9,8,9,9,8,9,3,4,9,8,7,6,4,9,8,9,7,8,9,9,9,0,1,9,8,9,2,9,7,6,5,6,8,9,8,7,6,5,4,5,9,9,8,7,6,5,8,7,8,9,1,2,9,9,9,8,7,5,5,3,2,3,9,7,8,9,9,8,9},
        {5,9,8,7,9,9,9,7,6,5,2,0,1,6,7,9,2,0,9,9,8,7,6,7,9,9,7,6,5,6,9,9,9,0,1,9,1,2,4,5,9,9,7,9,8,7,8,9,9,9,9,8,9,3,4,9,4,3,9,8,7,6,8,9,9,9,8,7,6,5,7,8,9,9,8,7,6,7,9,9,4,3,4,7,9,9,9,9,4,3,2,1,3,8,9,9,9,8,7,9},
        {9,8,9,6,7,8,9,9,5,4,3,1,2,4,6,9,3,9,8,9,7,6,5,6,7,8,9,9,6,7,8,9,9,9,9,1,0,1,2,3,9,9,9,8,7,6,7,9,9,9,8,7,9,9,6,7,9,9,9,9,8,7,9,9,8,7,9,8,8,6,8,9,9,9,9,8,7,8,9,6,5,6,5,6,7,9,9,8,5,2,1,0,1,6,7,9,9,9,6,8},
        {8,7,6,5,6,7,9,8,9,5,4,2,3,5,7,8,9,8,7,8,6,5,4,5,5,6,7,8,9,8,9,9,9,8,8,9,9,2,3,9,8,9,7,5,4,5,6,8,9,9,7,6,7,8,9,9,8,7,9,6,9,8,9,9,8,6,5,9,9,8,9,9,8,9,9,9,8,9,9,7,6,7,6,7,8,9,8,7,6,7,2,1,2,5,6,7,8,9,5,6},
        {7,6,5,4,4,5,7,7,8,9,5,3,4,6,7,9,8,7,6,6,4,4,3,4,4,5,7,9,9,9,8,9,8,7,6,7,8,9,9,9,7,6,5,4,3,4,5,7,8,9,6,5,6,7,8,9,8,6,8,5,6,9,9,9,9,5,4,5,2,9,9,8,7,8,9,6,9,6,4,9,7,9,9,8,9,8,9,8,7,4,3,2,3,4,5,9,9,3,4,5},
        {9,6,4,3,2,3,5,6,7,8,9,4,5,7,9,8,7,6,5,4,3,2,1,2,3,6,7,8,9,9,7,8,6,4,5,6,4,7,8,9,8,9,4,3,2,3,5,8,9,6,5,4,5,6,7,9,7,5,4,4,5,6,9,8,5,4,3,2,1,9,9,8,6,9,6,5,4,3,2,1,9,3,1,9,9,7,9,9,9,5,4,3,5,5,8,9,1,2,5,6},
        {8,9,6,4,0,1,5,9,8,9,9,7,6,8,9,9,9,7,6,3,2,1,0,1,2,3,8,9,9,8,6,7,7,3,2,4,3,6,9,8,9,9,8,6,4,5,7,8,9,7,6,5,6,8,8,9,8,3,2,3,4,9,8,7,6,5,4,3,9,7,6,5,4,8,9,9,5,4,2,0,9,5,9,8,7,6,5,9,8,6,5,4,7,6,7,8,9,3,4,5},
        {7,8,9,5,1,2,3,7,9,9,9,8,8,9,1,9,8,7,5,4,3,2,1,2,4,5,6,7,8,9,5,4,3,2,1,0,1,5,6,6,7,8,9,7,8,7,8,9,9,8,7,8,8,9,9,9,5,4,1,9,5,9,9,9,9,7,8,5,9,8,9,4,3,6,7,8,9,5,3,9,8,9,9,9,9,5,4,9,8,7,8,9,8,9,9,9,9,9,5,6},
        {6,8,9,9,4,3,4,5,6,8,9,9,9,9,0,1,9,8,6,5,5,3,2,3,4,7,8,9,9,7,6,5,4,4,5,1,2,3,4,5,8,9,9,8,9,9,9,7,4,9,8,9,9,6,7,8,9,9,9,8,9,8,9,9,9,8,8,6,7,9,8,6,2,5,6,7,8,9,9,8,7,8,9,9,9,5,3,2,9,9,9,8,9,3,1,3,9,8,9,9},
        {5,6,7,8,9,6,5,6,8,9,3,2,3,8,9,2,9,8,7,7,9,4,5,4,5,8,9,8,9,8,9,7,9,6,9,2,3,5,5,6,9,9,9,9,9,8,7,6,5,6,9,7,6,5,6,8,9,8,5,7,6,7,8,9,9,9,9,8,9,7,5,3,1,4,5,9,9,8,8,8,6,7,9,8,7,3,2,1,2,4,6,7,9,3,0,9,8,7,8,8},
        {4,5,9,9,9,8,7,8,9,9,9,0,4,6,7,9,5,9,8,8,6,5,6,6,6,9,8,7,8,9,9,9,8,9,8,9,4,6,8,9,9,8,9,9,9,9,8,9,6,7,8,9,2,4,5,9,8,7,4,5,5,5,6,7,8,9,9,9,8,6,4,3,2,3,9,8,8,7,6,7,5,6,8,9,6,4,1,0,2,3,5,9,3,2,1,9,9,6,9,7},
        {3,9,8,9,9,9,8,9,7,8,8,9,9,8,8,9,3,7,9,9,7,9,8,9,7,8,9,6,7,8,9,9,7,8,7,8,9,7,9,9,8,7,9,8,9,9,9,8,7,8,9,2,1,6,8,9,8,6,3,4,3,4,5,6,7,8,9,4,9,7,6,4,3,9,8,7,7,5,4,3,4,5,8,9,4,3,2,1,3,7,6,8,9,3,9,8,8,5,7,5},
        {2,4,6,7,8,9,9,5,6,5,6,7,8,9,9,6,4,6,7,9,9,8,9,5,9,9,4,5,8,9,8,7,6,9,6,9,9,8,9,9,7,6,5,7,8,9,8,9,9,9,4,3,2,3,9,8,7,4,2,1,2,3,9,8,8,9,4,3,9,8,9,5,9,8,7,6,5,4,3,2,5,6,7,9,5,4,3,4,4,8,7,9,7,5,9,7,6,4,5,4},
        {1,2,4,8,9,3,2,3,5,4,5,7,8,9,9,9,5,8,9,8,7,6,5,4,3,2,3,4,9,8,7,8,5,4,5,6,9,9,9,8,6,5,4,5,6,4,7,6,7,8,9,6,5,4,9,9,5,4,1,0,1,9,8,9,9,4,3,2,3,9,7,6,7,9,8,8,6,5,4,4,6,7,9,7,6,5,7,8,5,9,8,9,9,9,9,9,4,3,2,3},
        {2,8,6,7,8,9,0,1,2,3,4,9,9,9,9,8,9,9,5,9,9,8,6,5,5,1,2,9,8,7,6,5,4,3,9,9,8,9,9,9,9,7,2,1,2,3,5,5,6,8,9,7,6,9,8,7,6,3,2,2,2,4,7,8,9,3,2,1,2,9,8,9,9,9,9,8,7,6,9,6,7,9,9,8,7,8,8,9,7,8,9,6,7,8,9,8,6,4,1,4},
        {3,9,8,8,9,4,3,2,3,4,6,8,9,9,8,7,8,9,4,6,9,8,7,7,6,3,3,4,9,7,6,6,4,2,8,6,6,7,8,9,8,9,3,0,1,2,3,4,6,7,9,8,9,9,9,9,8,6,4,3,4,5,6,7,8,9,3,4,3,4,9,9,8,9,9,9,8,7,8,7,9,8,9,9,8,9,9,6,9,9,3,5,6,9,8,6,4,2,0,2},
        {4,7,9,9,6,5,4,3,5,6,7,9,9,9,7,6,9,9,3,9,9,9,8,9,7,9,5,7,9,8,5,4,2,1,3,4,5,6,9,3,7,9,9,2,2,4,8,9,7,9,2,9,8,9,9,9,9,6,5,4,5,6,7,8,9,9,7,5,4,9,9,9,7,8,9,8,9,8,9,8,9,7,7,9,9,8,7,5,4,0,1,6,9,8,7,6,5,3,1,3},
        {5,6,7,9,7,6,5,6,6,7,9,9,8,7,6,5,7,8,9,8,9,8,9,9,9,8,9,8,9,9,5,4,3,0,2,3,5,9,5,4,5,6,8,9,3,5,6,8,9,9,0,9,6,9,8,9,9,8,7,8,6,7,9,9,9,8,7,6,9,8,9,8,6,5,6,7,8,9,9,9,6,6,6,9,8,7,6,4,2,1,3,8,9,9,8,9,7,4,5,5},
        {9,8,8,9,8,7,6,8,9,8,9,8,7,7,6,4,6,7,9,7,6,7,8,9,8,7,8,9,8,7,6,5,5,4,3,9,7,8,9,5,6,7,9,8,7,6,7,8,9,8,9,8,5,6,7,8,9,9,9,9,7,9,7,8,9,9,8,9,9,7,7,5,4,3,7,8,9,8,7,6,5,4,5,5,9,8,7,9,9,8,4,5,6,9,9,9,8,7,6,7},
        {6,9,9,3,9,8,7,9,3,9,8,7,6,5,4,3,1,9,8,6,5,7,9,9,9,6,7,8,9,8,9,7,6,5,4,9,8,9,8,9,7,8,9,9,8,7,8,9,8,7,8,7,4,5,6,7,8,9,9,9,8,9,6,6,7,8,9,8,7,6,5,4,3,2,4,5,6,9,9,8,6,3,2,4,5,9,9,8,9,7,6,8,9,8,7,6,9,8,7,8},
        {5,4,3,2,3,9,8,9,2,3,9,9,4,3,2,1,0,9,8,7,6,7,9,8,7,5,6,7,9,9,9,8,9,6,7,8,9,7,7,7,9,9,5,4,9,8,9,9,9,6,5,6,3,4,5,6,7,8,9,6,9,3,4,5,9,9,9,8,6,5,4,2,0,1,3,5,6,7,9,9,4,3,1,2,3,9,8,7,8,9,7,8,9,9,9,5,4,9,8,9},
        {4,3,2,1,2,9,9,0,1,2,9,8,6,5,3,2,1,2,9,8,7,8,9,8,6,4,5,9,8,9,9,9,8,7,8,9,2,6,5,6,8,9,4,3,1,9,6,8,9,8,4,3,2,1,0,1,9,9,6,5,3,2,3,6,7,9,1,9,8,6,4,3,4,6,7,8,9,8,9,9,9,1,0,1,9,8,7,6,8,9,9,9,3,9,8,6,9,8,9,9},
        {6,4,3,0,9,8,9,1,9,4,5,9,7,6,4,3,5,3,4,9,8,9,5,9,8,3,4,9,7,8,9,9,9,8,9,2,1,2,4,5,6,8,9,3,2,3,5,9,8,7,6,4,3,2,2,3,8,8,9,6,4,3,7,8,8,9,2,3,9,7,9,5,6,7,8,9,9,9,9,9,8,9,1,9,8,7,6,5,9,9,8,9,2,1,9,8,9,7,8,9},
        {6,5,4,9,8,7,9,9,8,9,7,9,8,7,5,7,6,5,7,8,9,6,4,5,9,9,9,8,6,8,9,9,9,9,2,1,0,1,2,3,4,5,9,9,3,4,5,6,9,7,6,5,4,3,4,5,6,7,9,6,5,5,6,7,9,5,4,4,9,8,8,6,7,8,9,9,9,8,9,6,7,8,9,8,7,6,5,4,3,5,7,8,9,9,9,9,7,6,7,8},
        {7,6,5,9,7,6,6,4,6,7,9,8,9,8,9,8,7,9,8,9,6,5,3,4,9,8,8,7,5,6,7,8,9,4,3,3,9,7,3,5,5,6,7,8,9,5,6,7,8,9,7,6,5,4,5,6,7,8,9,9,6,6,7,8,9,6,6,7,8,9,9,8,8,9,9,9,9,7,6,5,8,9,9,9,6,5,4,2,1,2,3,9,8,7,7,5,4,5,6,7},
        {8,7,9,8,6,5,4,2,4,5,6,7,8,9,3,9,9,8,9,8,7,6,2,9,8,7,6,5,4,5,6,9,9,5,6,8,7,5,4,5,6,8,9,9,9,6,7,8,9,9,8,7,8,9,8,7,8,9,7,8,9,7,9,9,9,8,7,8,9,6,5,9,9,9,9,8,6,6,5,4,5,7,7,8,9,7,5,3,2,3,9,8,7,6,5,4,3,4,6,8},
        {9,8,9,9,6,5,0,1,2,6,7,8,9,5,4,9,8,7,9,9,8,9,3,4,9,6,5,6,2,4,5,7,8,9,8,9,8,6,8,9,7,9,7,9,8,7,9,9,2,1,9,8,9,9,9,8,9,5,6,7,8,9,9,9,9,9,8,9,8,7,4,3,4,9,8,7,5,7,4,3,3,6,6,7,8,9,6,8,9,5,9,9,7,1,0,1,2,3,8,9},
        {9,9,9,8,7,4,3,2,4,5,6,7,9,6,9,8,7,6,7,8,9,8,9,5,6,9,3,2,1,2,7,8,9,9,9,5,9,7,8,9,9,8,6,4,9,8,9,9,3,9,9,9,9,9,8,9,5,4,7,8,9,9,9,8,9,8,9,8,7,6,3,2,3,9,9,8,4,3,2,1,2,4,5,6,9,9,9,9,8,9,8,7,6,5,4,3,3,4,9,9},
        {8,9,9,9,8,5,4,3,4,5,7,9,1,9,8,7,6,5,6,7,6,7,8,9,9,8,7,3,2,4,6,7,8,9,3,4,9,8,9,9,9,8,7,3,2,9,9,8,9,8,9,9,8,7,6,5,4,3,5,9,9,8,9,6,5,7,9,8,7,4,2,0,9,8,7,6,3,2,1,0,1,8,6,7,8,9,8,9,7,8,9,9,7,6,7,8,5,5,6,7},
        {7,9,9,8,7,6,5,4,5,6,8,9,0,9,8,9,4,3,3,4,5,6,7,9,9,9,6,5,3,6,8,9,9,0,2,3,4,9,9,9,9,9,5,4,3,9,8,7,8,7,8,8,9,8,5,4,3,2,4,5,6,7,8,9,4,5,9,9,6,4,3,1,3,9,9,5,4,3,2,1,6,7,8,9,9,7,6,8,6,7,9,9,8,7,8,9,6,6,7,9},
        {6,8,9,9,9,7,9,8,7,7,8,9,9,8,7,4,3,2,2,3,6,9,8,9,9,8,7,6,8,7,8,9,2,1,3,4,5,6,7,8,9,8,7,5,9,8,7,6,4,5,6,7,8,9,6,4,3,1,2,3,5,6,7,9,2,9,8,7,6,5,9,3,9,9,8,9,9,4,3,2,4,5,9,8,7,6,5,4,5,6,8,9,9,8,9,9,9,7,9,3},
        {5,7,9,8,9,8,9,9,8,8,9,8,9,9,6,5,1,0,1,9,9,8,9,3,2,9,8,7,8,9,9,4,3,2,4,5,6,8,9,9,7,9,9,9,8,7,6,5,3,4,6,8,9,8,4,3,2,0,3,5,6,7,8,9,1,0,9,8,9,9,8,9,8,7,6,7,8,9,4,5,5,6,8,9,5,7,2,3,5,6,7,8,9,9,5,9,9,8,9,2},
        {4,3,7,6,7,9,9,9,9,9,5,6,9,7,5,4,3,1,9,8,8,7,8,9,1,2,9,8,9,7,6,5,4,3,5,9,7,8,9,7,6,9,8,7,6,5,4,3,2,1,5,7,9,7,6,5,4,7,5,8,9,8,9,3,2,1,2,9,9,9,7,6,5,4,5,8,7,8,9,6,9,8,9,5,4,3,1,2,5,6,8,9,2,3,4,7,8,9,0,1},
        {3,2,8,4,5,6,7,8,9,3,4,9,8,7,6,5,4,9,8,7,7,6,9,8,9,9,9,9,5,9,7,6,5,4,7,8,9,9,8,9,5,3,9,9,7,6,7,5,4,2,4,5,6,9,7,9,6,9,6,7,8,9,5,4,9,2,3,9,9,8,7,7,4,3,4,5,6,7,9,8,9,9,9,8,5,6,2,3,4,5,9,9,4,4,5,6,9,8,9,2},
        {2,1,2,3,4,5,8,9,1,2,3,4,9,8,7,9,9,8,9,6,5,5,6,7,8,8,9,5,4,9,8,7,9,9,9,9,9,8,7,8,9,2,0,9,8,9,9,8,5,3,5,8,7,8,9,8,9,9,8,9,9,7,6,9,8,9,9,8,7,6,5,4,3,2,3,4,6,7,8,9,9,9,8,7,6,5,3,5,5,6,7,8,9,5,7,9,8,7,8,9},
        {3,4,3,4,5,6,7,8,9,3,4,9,9,9,9,8,9,7,6,5,4,4,6,8,6,7,8,9,5,7,9,9,8,8,9,9,8,7,6,7,8,9,9,8,9,9,8,7,6,4,6,9,9,9,6,7,9,9,9,0,9,8,9,8,7,9,8,7,6,5,4,4,2,1,2,3,7,8,9,8,7,9,9,9,6,5,4,6,7,7,8,9,8,9,9,9,8,6,7,8},
        {4,6,4,5,6,7,8,9,9,9,9,7,8,9,7,7,9,6,5,4,3,2,3,4,5,6,7,8,9,8,9,8,6,7,8,9,9,8,4,3,4,9,8,7,8,9,9,8,7,8,9,6,5,6,5,9,8,9,3,2,4,9,8,7,6,7,9,8,7,6,3,2,1,0,1,2,8,9,9,8,6,8,9,9,7,6,5,7,8,9,9,5,7,8,9,6,5,4,5,9},
        {6,6,5,7,8,9,9,4,9,8,7,6,9,3,5,6,9,9,6,5,4,4,4,5,6,7,8,9,8,9,8,7,5,5,6,8,9,7,6,5,9,8,7,6,4,9,7,9,8,9,6,5,4,3,4,8,7,8,9,3,9,8,7,8,5,6,8,9,8,5,4,3,2,1,2,4,7,8,9,6,5,6,5,6,9,7,6,7,9,3,3,4,6,7,9,5,4,3,3,4},
        {8,7,6,7,9,3,4,3,4,9,6,5,3,2,4,9,8,8,9,7,6,7,5,6,7,8,9,8,7,5,9,4,3,4,5,6,7,9,8,6,7,9,6,5,3,6,6,7,9,9,7,6,3,2,6,5,6,7,9,9,8,7,6,5,4,5,7,9,7,6,5,4,3,2,3,4,5,7,8,9,4,2,3,4,9,8,9,8,9,1,2,3,5,6,8,9,2,1,2,3},
        {9,8,9,9,3,2,1,2,9,6,5,4,2,1,3,5,6,7,9,8,8,9,7,9,8,9,9,9,8,4,3,2,1,5,7,8,9,9,8,7,9,8,7,4,2,4,5,6,7,8,9,3,2,1,2,4,5,6,9,8,7,6,5,4,3,4,5,9,8,7,6,5,4,5,7,5,6,7,8,9,3,1,2,3,5,9,6,9,9,0,1,8,6,7,9,6,3,3,4,4},
        {9,9,6,5,4,1,0,9,8,7,3,2,1,0,2,4,5,8,9,9,9,9,8,9,9,9,9,8,7,6,5,6,7,6,8,9,1,2,9,9,8,7,6,5,3,5,6,7,8,9,7,5,3,2,4,6,6,7,8,9,7,6,4,3,2,4,5,6,9,8,8,6,7,6,8,6,7,8,9,2,1,0,1,2,3,4,5,6,8,9,2,3,7,8,9,5,4,4,6,7}
    };

    public static boolean isLowPoint(int row, int position, int[][] heights) {
        int height = heights[row][position];

        if(row == 0) { // first row
            if (position == 0) { // top left corner
                if (height < heights[row + 1][position] && height < heights[row][position + 1]) return true;
            } else if (position == heights[row].length - 1) { // top right corner
                if (height < heights[row + 1][position] && height < heights[row][position - 1]) return true;
            } else { // within the row
                if (height < heights[row + 1][position] && height < heights[row][position - 1] && height < heights[row][position + 1]) return true;
            }
        } else if (row == heights.length - 1) { // last row
            if (position == 0) { // bottom left corner
                if (height < heights[row - 1][position] && height < heights[row][position + 1]) return true;
            } else if (position == heights[row].length - 1) { // bottom right corner
                if (height < heights[row - 1][position] && height < heights[row][position - 1]) return true;
            } else { // within the row
                if (height < heights[row - 1][position] && height < heights[row][position - 1] && height < heights[row][position + 1]) return true;
            }
        } else { // within the matrix
            if (position == 0) { // height in the left
                if (height < heights[row - 1][position] && height < heights[row][position + 1] && height < heights[row + 1][position]) return true;
            } else if (position == heights[row].length - 1) { // height in the right
                if (height < heights[row - 1][position] && height < heights[row][position - 1] && height < heights[row + 1][position]) return true;
            } else { // general position within the matrix
                if (height < heights[row - 1][position] && height < heights[row][position - 1] && height < heights[row + 1][position] && height < heights[row][position + 1]) return true;
            }
        }

        return false;
    }

    public static void part1(int[][] heights) {
        long riskLevel = 0;

        for (int row = 0; row < heights.length; row++) {
            for (int i = 0; i < heights[row].length; i++) {
                if (isLowPoint(row, i, heights)) {
                    riskLevel += heights[row][i] + 1;
                }
            }
        }

        System.out.println("Risk Level: " + riskLevel);
    }

    public static int getBasinSize(int row, int position, int[][] heights, Set<String> positionsSet) {
        if (heights[row][position] == WALL) return 0;
        // prevent visiting the same positions over and over
        String positionString = "" + row + position;
        if (positionsSet.contains(positionString)) return 0;

        positionsSet.add(positionString);

        int basinSize = 1; // 1 because we start at this position which is not a WALL

        if(row == 0) { // first row
            if (position == 0) { // top left corner
                basinSize += getBasinSize(row + 1, position, heights, positionsSet); // down
                basinSize += getBasinSize(row, position + 1, heights, positionsSet); // right
                return basinSize;
            } else if (position == heights[row].length - 1) { // top right corner
                basinSize += getBasinSize(row + 1,position, heights, positionsSet); // down
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                return basinSize;
            } else { // within the row
                basinSize += getBasinSize(row + 1,position, heights, positionsSet); // down
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                basinSize += getBasinSize(row,position + 1, heights, positionsSet); // right
                return basinSize;
            }
        } else if (row == heights.length - 1) { // last row
            if (position == 0) { // bottom left corner
                basinSize += getBasinSize(row - 1,position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position + 1, heights, positionsSet); // right
                return basinSize;
            } else if (position == heights[row].length - 1) { // bottom right corner
                basinSize += getBasinSize(row - 1,position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                return basinSize;
            } else { // within the row
                basinSize += getBasinSize(row - 1,position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                basinSize += getBasinSize(row,position + 1, heights, positionsSet); // right
                return basinSize;
            }
        } else { // within the matrix
            if (position == 0) { // height in the left
                basinSize += getBasinSize(row - 1,position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position + 1, heights, positionsSet); // right
                basinSize += getBasinSize(row + 1,position, heights, positionsSet); // down
                return basinSize;
            } else if (position == heights[row].length - 1) { // height in the right
                basinSize += getBasinSize(row - 1,position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                basinSize += getBasinSize(row + 1,position, heights, positionsSet); // down
                return basinSize;
            } else { // general position within the matrix
                basinSize += getBasinSize(row - 1, position, heights, positionsSet); // up
                basinSize += getBasinSize(row,position - 1, heights, positionsSet); // left
                basinSize += getBasinSize(row + 1,position, heights, positionsSet); // down
                basinSize += getBasinSize(row,position + 1, heights, positionsSet); // right
                return basinSize;
            }
        }
    }

    public static void addNewBasinSize(int basinSize, List<Integer> top3) {
        int min = Collections.min(top3);

        if (basinSize > min) top3.set(top3.indexOf(min), basinSize);
    }

    public static void part2(int[][] heights) {
        List<Integer> top3 = new ArrayList<>(3);
        top3.add(0);
        top3.add(0);
        top3.add(0);

        Set<String> positionsSet;

        for (int row = 0; row < heights.length; row++) {
            for (int i = 0; i < heights[row].length; i++) {
                positionsSet = new HashSet<>();
                if (isLowPoint(row, i, heights)) {
                    int basinSize = getBasinSize(row, i, heights, positionsSet);
                    addNewBasinSize(basinSize, top3);
                }
            }
        }

        System.out.println("Top 3: " + top3);
        System.out.println("Result: " + top3.get(0) * top3.get(1) * top3.get(2));
    }

    static int[][] miniTest =
            {
                    {8, 7, 6, 5, 4, 3, 2, 1, 0},
                    {9, 9, 9, 6, 9, 9, 9, 9, 9},
                    {9, 9, 9, 5, 9, 9, 9, 9, 9}
            };

    public static void main(String[] args) {
        //part1(heightsTest);
        //part2(heightsTest);
        //part2(heights);
        part2(miniTest);
    }

}
